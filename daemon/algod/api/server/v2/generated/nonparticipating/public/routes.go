// Package public provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/algorand/oapi-codegen DO NOT EDIT.
package public

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	. "github.com/algorand/go-algorand/daemon/algod/api/server/v2/generated/model"
	"github.com/algorand/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get account information.
	// (GET /v2/accounts/{address})
	AccountInformation(ctx echo.Context, address string, params AccountInformationParams) error
	// Get account information about a given app.
	// (GET /v2/accounts/{address}/applications/{application-id})
	AccountApplicationInformation(ctx echo.Context, address string, applicationId uint64, params AccountApplicationInformationParams) error
	// Get account information about a given asset.
	// (GET /v2/accounts/{address}/assets/{asset-id})
	AccountAssetInformation(ctx echo.Context, address string, assetId uint64, params AccountAssetInformationParams) error
	// Get application information.
	// (GET /v2/applications/{application-id})
	GetApplicationByID(ctx echo.Context, applicationId uint64) error
	// Get box information for a given application.
	// (GET /v2/applications/{application-id}/box)
	GetApplicationBoxByName(ctx echo.Context, applicationId uint64, params GetApplicationBoxByNameParams) error
	// Get all box names for a given application.
	// (GET /v2/applications/{application-id}/boxes)
	GetApplicationBoxes(ctx echo.Context, applicationId uint64, params GetApplicationBoxesParams) error
	// Get asset information.
	// (GET /v2/assets/{asset-id})
	GetAssetByID(ctx echo.Context, assetId uint64) error
	// Get the block for the given round.
	// (GET /v2/blocks/{round})
	GetBlock(ctx echo.Context, round uint64, params GetBlockParams) error
	// Get the block hash for the block on the given round.
	// (GET /v2/blocks/{round}/hash)
	GetBlockHash(ctx echo.Context, round uint64) error
	// Gets a proof for a given light block header inside a state proof commitment
	// (GET /v2/blocks/{round}/lightheader/proof)
	GetLightBlockHeaderProof(ctx echo.Context, round uint64) error
	// Get a proof for a transaction in a block.
	// (GET /v2/blocks/{round}/transactions/{txid}/proof)
	GetTransactionProof(ctx echo.Context, round uint64, txid string, params GetTransactionProofParams) error
	// Get the top level transaction IDs for the block on the given round.
	// (GET /v2/blocks/{round}/txids)
	GetBlockTxids(ctx echo.Context, round uint64) error
	// Get a LedgerStateDelta object for a given transaction group
	// (GET /v2/deltas/txn/group/{id})
	GetLedgerStateDeltaForTransactionGroup(ctx echo.Context, id string, params GetLedgerStateDeltaForTransactionGroupParams) error
	// Get a LedgerStateDelta object for a given round
	// (GET /v2/deltas/{round})
	GetLedgerStateDelta(ctx echo.Context, round uint64, params GetLedgerStateDeltaParams) error
	// Get LedgerStateDelta objects for all transaction groups in a given round
	// (GET /v2/deltas/{round}/txn/group)
	GetTransactionGroupLedgerStateDeltasForRound(ctx echo.Context, round uint64, params GetTransactionGroupLedgerStateDeltasForRoundParams) error
	// Returns the timestamp offset. Timestamp offsets can only be set in dev mode.
	// (GET /v2/devmode/blocks/offset)
	GetBlockTimeStampOffset(ctx echo.Context) error
	// Given a timestamp offset in seconds, adds the offset to every subsequent block header's timestamp.
	// (POST /v2/devmode/blocks/offset/{offset})
	SetBlockTimeStampOffset(ctx echo.Context, offset uint64) error
	// Get the current supply reported by the ledger.
	// (GET /v2/ledger/supply)
	GetSupply(ctx echo.Context) error
	// Get a state proof that covers a given round
	// (GET /v2/stateproofs/{round})
	GetStateProof(ctx echo.Context, round uint64) error
	// Gets the current node status.
	// (GET /v2/status)
	GetStatus(ctx echo.Context) error
	// Gets the node status after waiting for a round after the given round.
	// (GET /v2/status/wait-for-block-after/{round})
	WaitForBlock(ctx echo.Context, round uint64) error
	// Compile TEAL source code to binary, produce its hash
	// (POST /v2/teal/compile)
	TealCompile(ctx echo.Context, params TealCompileParams) error
	// Disassemble program bytes into the TEAL source code.
	// (POST /v2/teal/disassemble)
	TealDisassemble(ctx echo.Context) error
	// Provide debugging information for a transaction (or group).
	// (POST /v2/teal/dryrun)
	TealDryrun(ctx echo.Context) error
	// Get parameters for constructing a new transaction
	// (GET /v2/transactions/params)
	TransactionParams(ctx echo.Context) error
	// Simulates a raw transaction or transaction group as it would be evaluated on the network. The simulation will use blockchain state from the latest committed round.
	// (POST /v2/transactions/simulate)
	SimulateTransaction(ctx echo.Context, params SimulateTransactionParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AccountInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// ------------- Optional query parameter "exclude" -------------

	err = runtime.BindQueryParameter("form", true, false, "exclude", ctx.QueryParams(), &params.Exclude)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter exclude: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountInformation(ctx, address, params)
	return err
}

// AccountApplicationInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountApplicationInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountApplicationInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountApplicationInformation(ctx, address, applicationId, params)
	return err
}

// AccountAssetInformation converts echo context to params.
func (w *ServerInterfaceWrapper) AccountAssetInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "address" -------------
	var address string

	err = runtime.BindStyledParameterWithLocation("simple", false, "address", runtime.ParamLocationPath, ctx.Param("address"), &address)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter address: %s", err))
	}

	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "asset-id", runtime.ParamLocationPath, ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountAssetInformationParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AccountAssetInformation(ctx, address, assetId, params)
	return err
}

// GetApplicationByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationByID(ctx, applicationId)
	return err
}

// GetApplicationBoxByName converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationBoxByName(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApplicationBoxByNameParams
	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationBoxByName(ctx, applicationId, params)
	return err
}

// GetApplicationBoxes converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplicationBoxes(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "application-id" -------------
	var applicationId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "application-id", runtime.ParamLocationPath, ctx.Param("application-id"), &applicationId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter application-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApplicationBoxesParams
	// ------------- Optional query parameter "max" -------------

	err = runtime.BindQueryParameter("form", true, false, "max", ctx.QueryParams(), &params.Max)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max: %s", err))
	}

	// ------------- Optional query parameter "prefix" -------------

	err = runtime.BindQueryParameter("form", true, false, "prefix", ctx.QueryParams(), &params.Prefix)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter prefix: %s", err))
	}

	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", ctx.QueryParams(), &params.After)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter after: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplicationBoxes(ctx, applicationId, params)
	return err
}

// GetAssetByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetAssetByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "asset-id" -------------
	var assetId uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "asset-id", runtime.ParamLocationPath, ctx.Param("asset-id"), &assetId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asset-id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAssetByID(ctx, assetId)
	return err
}

// GetBlock converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlock(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetBlockParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlock(ctx, round, params)
	return err
}

// GetBlockHash converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlockHash(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlockHash(ctx, round)
	return err
}

// GetLightBlockHeaderProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetLightBlockHeaderProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLightBlockHeaderProof(ctx, round)
	return err
}

// GetTransactionProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetTransactionProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	// ------------- Path parameter "txid" -------------
	var txid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "txid", runtime.ParamLocationPath, ctx.Param("txid"), &txid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter txid: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTransactionProofParams
	// ------------- Optional query parameter "hashtype" -------------

	err = runtime.BindQueryParameter("form", true, false, "hashtype", ctx.QueryParams(), &params.Hashtype)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hashtype: %s", err))
	}

	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTransactionProof(ctx, round, txid, params)
	return err
}

// GetBlockTxids converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlockTxids(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlockTxids(ctx, round)
	return err
}

// GetLedgerStateDeltaForTransactionGroup converts echo context to params.
func (w *ServerInterfaceWrapper) GetLedgerStateDeltaForTransactionGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLedgerStateDeltaForTransactionGroupParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLedgerStateDeltaForTransactionGroup(ctx, id, params)
	return err
}

// GetLedgerStateDelta converts echo context to params.
func (w *ServerInterfaceWrapper) GetLedgerStateDelta(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLedgerStateDeltaParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLedgerStateDelta(ctx, round, params)
	return err
}

// GetTransactionGroupLedgerStateDeltasForRound converts echo context to params.
func (w *ServerInterfaceWrapper) GetTransactionGroupLedgerStateDeltasForRound(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTransactionGroupLedgerStateDeltasForRoundParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTransactionGroupLedgerStateDeltasForRound(ctx, round, params)
	return err
}

// GetBlockTimeStampOffset converts echo context to params.
func (w *ServerInterfaceWrapper) GetBlockTimeStampOffset(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetBlockTimeStampOffset(ctx)
	return err
}

// SetBlockTimeStampOffset converts echo context to params.
func (w *ServerInterfaceWrapper) SetBlockTimeStampOffset(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "offset" -------------
	var offset uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "offset", runtime.ParamLocationPath, ctx.Param("offset"), &offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SetBlockTimeStampOffset(ctx, offset)
	return err
}

// GetSupply converts echo context to params.
func (w *ServerInterfaceWrapper) GetSupply(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSupply(ctx)
	return err
}

// GetStateProof converts echo context to params.
func (w *ServerInterfaceWrapper) GetStateProof(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStateProof(ctx, round)
	return err
}

// GetStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetStatus(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetStatus(ctx)
	return err
}

// WaitForBlock converts echo context to params.
func (w *ServerInterfaceWrapper) WaitForBlock(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "round" -------------
	var round uint64

	err = runtime.BindStyledParameterWithLocation("simple", false, "round", runtime.ParamLocationPath, ctx.Param("round"), &round)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter round: %s", err))
	}

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.WaitForBlock(ctx, round)
	return err
}

// TealCompile converts echo context to params.
func (w *ServerInterfaceWrapper) TealCompile(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params TealCompileParams
	// ------------- Optional query parameter "sourcemap" -------------

	err = runtime.BindQueryParameter("form", true, false, "sourcemap", ctx.QueryParams(), &params.Sourcemap)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sourcemap: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealCompile(ctx, params)
	return err
}

// TealDisassemble converts echo context to params.
func (w *ServerInterfaceWrapper) TealDisassemble(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealDisassemble(ctx)
	return err
}

// TealDryrun converts echo context to params.
func (w *ServerInterfaceWrapper) TealDryrun(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TealDryrun(ctx)
	return err
}

// TransactionParams converts echo context to params.
func (w *ServerInterfaceWrapper) TransactionParams(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TransactionParams(ctx)
	return err
}

// SimulateTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) SimulateTransaction(ctx echo.Context) error {
	var err error

	ctx.Set(Api_keyScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params SimulateTransactionParams
	// ------------- Optional query parameter "format" -------------

	err = runtime.BindQueryParameter("form", true, false, "format", ctx.QueryParams(), &params.Format)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter format: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SimulateTransaction(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface, m ...echo.MiddlewareFunc) {
	RegisterHandlersWithBaseURL(router, si, "", m...)
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string, m ...echo.MiddlewareFunc) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v2/accounts/:address", wrapper.AccountInformation, m...)
	router.GET(baseURL+"/v2/accounts/:address/applications/:application-id", wrapper.AccountApplicationInformation, m...)
	router.GET(baseURL+"/v2/accounts/:address/assets/:asset-id", wrapper.AccountAssetInformation, m...)
	router.GET(baseURL+"/v2/applications/:application-id", wrapper.GetApplicationByID, m...)
	router.GET(baseURL+"/v2/applications/:application-id/box", wrapper.GetApplicationBoxByName, m...)
	router.GET(baseURL+"/v2/applications/:application-id/boxes", wrapper.GetApplicationBoxes, m...)
	router.GET(baseURL+"/v2/assets/:asset-id", wrapper.GetAssetByID, m...)
	router.GET(baseURL+"/v2/blocks/:round", wrapper.GetBlock, m...)
	router.GET(baseURL+"/v2/blocks/:round/hash", wrapper.GetBlockHash, m...)
	router.GET(baseURL+"/v2/blocks/:round/lightheader/proof", wrapper.GetLightBlockHeaderProof, m...)
	router.GET(baseURL+"/v2/blocks/:round/transactions/:txid/proof", wrapper.GetTransactionProof, m...)
	router.GET(baseURL+"/v2/blocks/:round/txids", wrapper.GetBlockTxids, m...)
	router.GET(baseURL+"/v2/deltas/txn/group/:id", wrapper.GetLedgerStateDeltaForTransactionGroup, m...)
	router.GET(baseURL+"/v2/deltas/:round", wrapper.GetLedgerStateDelta, m...)
	router.GET(baseURL+"/v2/deltas/:round/txn/group", wrapper.GetTransactionGroupLedgerStateDeltasForRound, m...)
	router.GET(baseURL+"/v2/devmode/blocks/offset", wrapper.GetBlockTimeStampOffset, m...)
	router.POST(baseURL+"/v2/devmode/blocks/offset/:offset", wrapper.SetBlockTimeStampOffset, m...)
	router.GET(baseURL+"/v2/ledger/supply", wrapper.GetSupply, m...)
	router.GET(baseURL+"/v2/stateproofs/:round", wrapper.GetStateProof, m...)
	router.GET(baseURL+"/v2/status", wrapper.GetStatus, m...)
	router.GET(baseURL+"/v2/status/wait-for-block-after/:round", wrapper.WaitForBlock, m...)
	router.POST(baseURL+"/v2/teal/compile", wrapper.TealCompile, m...)
	router.POST(baseURL+"/v2/teal/disassemble", wrapper.TealDisassemble, m...)
	router.POST(baseURL+"/v2/teal/dryrun", wrapper.TealDryrun, m...)
	router.GET(baseURL+"/v2/transactions/params", wrapper.TransactionParams, m...)
	router.POST(baseURL+"/v2/transactions/simulate", wrapper.SimulateTransaction, m...)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
